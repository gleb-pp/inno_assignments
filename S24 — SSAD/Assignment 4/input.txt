class IBook {
public:
    virtual string getTitle() const = 0;
    virtual string getAuthor() const = 0;
    virtual void read(User* user) = 0;
    virtual void listen(User* user) = 0;
};

class BookProxy {
private:
    IBook* book;
    User* user;
public:
    BookProxy(IBook* b, User* u) : book(b), user(u) {}

    void readBook() {
        cout << user->getName() << " reading " << book->getTitle() << " by " << book->getAuthor() << endl;
    }

    void listenBook() {
        if (user->hasPremium()) {
            cout << user->getName() << " listening " << book->getTitle() << " by " << book->getAuthor() << endl;
        } else {
            cout << "No access" << endl;
        }
    }
};

class Book : public IBook {
    ...
    void read(User* user) {
        BookProxy proxy(this, user);
        proxy.readBook();
    }

    void listen(User* user) {
        BookProxy proxy(this, user);
        proxy.listenBook();
    }
};